//problem 1:
public class Demo {
    public static void main(String[] args) {
        find_common_divisor(100,120);
    }
    public static void find_common_divisor(int a,int b)
    {
        int small=a<b?a:b;
        int div=2;
        while(div<=small/2)
        {
            if(a%div==0 && b%div==0)
            {
                System.out.println(div);
            }
            div++;
        }
    }
}
//problem 2:
public class Demo {
    public static void main(String[] args) {
        least_common_multiple(3,15);
    }
   public static void least_common_multiple(int a,int b)
   {
      int max=a>b?a:b;
      while(true)
      {
        if(max%a==0 &&max%b==0)
        {
            System.out.println(max);
            break;
        }
        max++;
      }

   }
}

//problem 3:
sum  of digit until it is a single digitpublic class Demo {
    public static void main(String[] args) {

       int sum= sumofdigit(12345);
       while(sum>9)
       {
        sum=sumofdigit(sum);
       }
       System.out.println(sum);
    }

    public static int  sumofdigit(int n) {
        int sum = 0;
        while(n>0)
        {
            sum=sum+n%10;
            n=n/10;
        }
        return sum;
       
    }
}

//problem 6:
print unique element in an array with count 
import java.util.Arrays;
public class Demo {
    public static void main(String[] args) {
        int a[]={45,51,51,78,78,98,98,};
        int n=a.length;
        Arrays.sort(a);
        int[] unique=removeDup(a,n);
        for(int i:unique)
        {
            System.out.println(i);
        }
        System.out.println(unique.length);
    }
    public static int[] removeDup(int[] a,int n)
    {
        if(n==0 ||n==1)
        {
            return a;
        }
        int j=1;
        for(int i=1;i<n;i++)
        {
            if(a[i]!=a[i-1])
            {
                a[j]=a[i];
                j++;
            }
        }
        int []unique=new int[j];
        for(int i=0;i<unique.length;i++)
        {
            unique[i]=a[i];
        }
        return unique;
        
    }
}
//problem 7
prime factor
public class Test {
    public static void main(String[] args) {
        int n = 6;
        primefactor(n);
    }

    public static void primefactor(int number) {
        for (int i = 2; i <= number/2; i++) {
            while (number % i == 0) {
                System.out.println(i + " ");
                number = number / i;
            }
        }
        if (number > 2) {
            System.out.println(number);
        }
    }
}


//progam 8
import java.util.Scanner;

public class PrimeFactorSum {

      public static int primeFactorSum(int[] arr, int num) {
        int sum = 0;
        boolean validIndexFound = false;
        for (int i = 2; i <= num; i++) {
            int count = 0;
            while (num % i == 0) {
                num /= i;
                count++;
            }
            if (count > 0 && i < arr.length) {
                sum += count * arr[i];
                validIndexFound = true;
            }
        }
        
        return validIndexFound ? sum : 0;
    }

    public static void main(String[] args) {
        
       int arr[]={11,21,32,35,1,23};
       int n=arr.length;
        if (n == 0) {
            System.out.println(-1);
            return;
        }
        Scanner sc=new Scanner(System.in);
        int num = sc.nextInt();

        int result = primeFactorSum(arr, num);
        System.out.println(result);
        
        sc.close();
    }
}
//program 9
vowels replace
public class Demo {
    public static void main(String[] args) {
        String s = "google";
        char[] c = s.toCharArray();
        String str = new String(reverseVowels(c));
        System.out.println(str);
    }

    public static char[] reverseVowels(char[] str) {
        int i = 0;
        int j = str.length - 1;
        while (i < j) {
            while (i < j && !isVowel(str[i])) {
                i++;
            }
            while (i < j && !isVowel(str[j])) {
                j--;
            }
            if (i < j) {
                char temp = str[i];
                str[i] = str[j];
                str[j] = temp;
                i++;
                j--;
            }
        }
        return str;
    }

    public static boolean isVowel(char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
}

//program 10
commacount
public class commacount {
    public static void main(String[] args) {
        int n = 1010;
        int commacount = 0;

        for (int i = 999; i <= n; i++) {
            int len = 0;
            for (int j = i; j > 0; j = j / 10) {
                len++;
            }
            if(len>3)
            {
                commacount=commacount+(len-1)/3;
            }
        }
        System.out.println(commacount);
    }

}



